import { useState, useEffect } from 'react';
import { Button } from '../components/Button';
import { GameBoard } from '../components/GameBoard';
import { useWebSocket } from '../hooks/useWebSocket';
import { generateBotBoard } from '../../domain/bot-placement';
import type { BoardState } from '../../types';

interface PlacementScreenProps {
  gameId: string;
  onReady: () => void;
  onCancel: () => void;
}

export default function PlacementScreen({ gameId, onReady, onCancel }: PlacementScreenProps) {
  const [board, setBoard] = useState<BoardState | null>(null);
  const { send, on, connected } = useWebSocket();

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    const unsubscribe = on('board:set', () => {
      // –î–æ—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–º
      console.log('Board set confirmed by server');
    });

    const unsubscribeAllReady = on('game:all_ready', () => {
      // –û–±–µ –¥–æ—Å–∫–∏ –≥–æ—Ç–æ–≤—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
      console.log('All boards ready, starting battle');
      onReady();
    });

    return () => {
      unsubscribe();
      unsubscribeAllReady();
    };
  }, [on, onReady]);

  const handleBoardChange = (newBoard: BoardState) => {
    setBoard(newBoard);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã
    const shipsConfig = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];
    const hasAllShips = shipsConfig.every(
      (size) => newBoard.ships.filter((s) => s.size === size).length >= 1
    );

    if (hasAllShips && newBoard.ships.length === 10) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      send('game:board.set', {
        gameId,
        board: newBoard,
      });
    }
  };

  const handleAutoPlace = () => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å–∫—É
    const autoBoard = generateBotBoard(10, 10);
    setBoard(autoBoard);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (autoBoard.ships.length === 10) {
      send('game:board.set', {
        gameId,
        board: autoBoard,
      });
    }
  };

  const handleReady = () => {
    if (!board) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã
    if (board.ships.length !== 10) {
      alert('–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏!');
      return;
    }

    onReady();
  };

  return (
    <div className="flex flex-col items-center gap-6">
      <h2 className="text-2xl font-bold">–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π</h2>

      <div className="w-full max-w-md">
        <div className="bg-tg-secondary-bg p-4 rounded-lg mb-4">
          <p className="text-sm text-tg-hint">
            –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–µ—Ç–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏.
          </p>
        </div>

        <GameBoard width={10} height={10} onBoardChange={handleBoardChange} showShips={true} />

        {!connected && (
          <p className="text-red-500 text-sm mt-2">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</p>
        )}

        <div className="mt-4 space-y-2">
          <Button onClick={handleAutoPlace} variant="secondary" fullWidth>
            üé≤ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
          </Button>
          
          <div className="flex gap-2">
            <Button onClick={handleReady} disabled={!board || board.ships.length !== 10} fullWidth>
              –ì–æ—Ç–æ–≤ ({board?.ships.length || 0}/10 –∫–æ—Ä–∞–±–ª–µ–π)
            </Button>
            <Button onClick={onCancel} variant="secondary">
              –û—Ç–º–µ–Ω–∞
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

